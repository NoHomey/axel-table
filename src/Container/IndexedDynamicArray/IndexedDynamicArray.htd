#pragma once

#include "../DynamicArray/DynamicArray.htd"

template<typename Element>
struct IndexedElement {
    size_t index;
    Element element;
};

struct FindIndexResult {
    size_t index;
    bool found;

    FindIndexResult(size_t elementIndex = 0, bool isFound = false) noexcept
    : index{elementIndex}, found{isFound} { }
};

template<typename Element>
class IndexedDynamicArray: public DynamicArray<IndexedElement<Element>> {
private:
    const IndexedElement<Element>* data() const noexcept;

    void push(const Element& element);

    void pop();

public:
    IndexedDynamicArray() noexcept = default;

    explicit IndexedDynamicArray(size_t size);

    ~IndexedDynamicArray() noexcept = default;

    IndexedDynamicArray(const IndexedDynamicArray& other) = default;

    IndexedDynamicArray(IndexedDynamicArray&& other) noexcept = default;

    IndexedDynamicArray& operator=(const IndexedDynamicArray& other) = default;

    IndexedDynamicArray& operator=(IndexedDynamicArray&& other) noexcept = default;

    bool hasElementAt(size_t index) const noexcept;

    const Element& operator[](size_t index) const noexcept;

    const Element& getElement(size_t index) const noexcept;

    size_t getFirstElementIndex() const noexcept;

    size_t getLastElementIndex() const noexcept;

    void setElement(size_t index, const Element& element);

    void removeElement(size_t index) noexcept;

    void clear() noexcept;

    template<typename ForEachInDynamicArrayFunction>
    void forEach(ForEachInDynamicArrayFunction& function) const noexcept;

    template<typename ForEachInDynamicArrayFunction>
    void forEach(const ForEachInDynamicArrayFunction& function) const noexcept;

private:
    void sort() noexcept;

    FindIndexResult findArrayIndexOfElementAtIndex(size_t index) const;

    void addNewElement(const Element& element, size_t index);

    using Base = DynamicArray<IndexedElement<Element>>;

    template<typename ForEachInDynamicArrayFunction>
    void forEachElement(ForEachInDynamicArrayFunction function) const noexcept;

    mutable bool catched;

    mutable size_t catchedIndex;

    mutable size_t catchedArrayIndex;
};

#include "IndexedDynamicArray.tci"