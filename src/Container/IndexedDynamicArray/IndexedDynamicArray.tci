#include "IndexedDynamicArray.htd"

template<typename Element>
IndexedDynamicArray<Element>::IndexedDynamicArray(size_t size)
: IndexedDynamicArray::Base{size} { }

template<typename Element>
const Element& IndexedDynamicArray<Element>::operator[](size_t index) const {
    if(IndexedDynamicArray::Base::isEmpty()) {
        throw EmptyDynamicArray{};
    }
    size_t leftSide = 0;
    size_t rightSide = IndexedDynamicArray::Base::arraySize - 1;
    size_t center = 0;
    while(leftSide <= rightSide) {
        center = (rightSide + leftSide) / 2;
        if(IndexedDynamicArray::Base::array[center].index == index) {
            return IndexedDynamicArray::Base::array[center].element;
        }
        if(IndexedDynamicArray::Base::array[center].index < index) {
            leftSide = center + 1;
        } else {
            if(center > 0) {
                rightSide = center - 1;
            } else {
                break;
            }
        }
    }
    throw IndexNotFound{};
}

template<typename Element>
const Element& IndexedDynamicArray<Element>::getElement(size_t index) const {
    if(!IndexedDynamicArray::Base::isEmpty()) {
        const size_t elementIndex = findArrayIndexOfElementAtIndex(index);
        return IndexedDynamicArray::Base::array[elementIndex].element;
    } else {
        throw IndexNotFound{};
    }
}

template<typename Element>
void IndexedDynamicArray<Element>::addElement(const Element& element, size_t index) {
    IndexedDynamicArray::Base::push({index, element});
    size_t i = 0;
    size_t j = 0;
    size_t minIndex = 0;
    const size_t last = IndexedDynamicArray::Base::arraySize - 1;
    IndexedElement<Element> temp;
    for(; i < last; ++i) {
        minIndex = i;
        for(j = i + 1; j < IndexedDynamicArray::Base::arraySize; ++j) {
            if(IndexedDynamicArray::Base::array[j].index < IndexedDynamicArray::Base::array[minIndex].index) {
                minIndex = j;
            }
        }

        if(minIndex != i) {
            temp = IndexedDynamicArray::Base::array[minIndex];
            IndexedDynamicArray::Base::array[minIndex] = IndexedDynamicArray::Base::array[i];
            IndexedDynamicArray::Base::array[i] = temp;
        }
    }
}

template<typename Element>
void IndexedDynamicArray<Element>::setElement(const Element& element, size_t index) {
    size_t elementIndex;
    try {
        elementIndex = findArrayIndexOfElementAtIndex(index);
        IndexedDynamicArray::Base::array[elementIndex].element = element;
    } catch(::Exception& error) {
        addElement(element, index);
    }
    
}

template<typename Element>
size_t IndexedDynamicArray<Element>::findArrayIndexOfElementAtIndex(size_t index) const {
    for(size_t i = 0; i < IndexedDynamicArray::Base::arraySize; ++i) {
        if(IndexedDynamicArray::Base::array[i].index == index) {
            return i;
        }
    }
    throw IndexNotFound{};
}

template<typename Element>
void IndexedDynamicArray<Element>::removeElement(size_t index) {
    if(!IndexedDynamicArray::Base::isEmpty()) {
        for(size_t i = findArrayIndexOfElementAtIndex(index) + 1; i < IndexedDynamicArray::Base::arraySize; ++i) {
            IndexedDynamicArray::Base::array[i - 1] = IndexedDynamicArray::Base::array[i];
        }
        --IndexedDynamicArray::Base::arraySize;
    } else {
        throw EmptyDynamicArray{};
    }
}