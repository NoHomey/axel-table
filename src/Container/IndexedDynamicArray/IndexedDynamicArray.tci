#include "IndexedDynamicArray.htd"

template<typename Element>
IndexedDynamicArray<Element>::IndexedDynamicArray(size_t size)
: Base{size}, catched{false}, catchedIndex{0}, catchedArrayIndex{0} { }

template<typename Element>
FindIndexResult IndexedDynamicArray<Element>::findArrayIndexOfElementAtIndex(size_t index) const {
    if(Base::isEmpty()) {
        return {};
    }
    if(catched && (catchedIndex == index)) {
        //std::cout << "CATCHED: " << index << ' ' << catchedArrayIndex << std::endl;
        return {catchedArrayIndex, true};
    }
    size_t leftSide = 0;
    size_t rightSide = Base::arraySize - 1;
    size_t center = 0;
    while(leftSide <= rightSide) {
        center = (rightSide + leftSide) / 2;
        if(Base::array[center].index == index) {
            catched = true;
            catchedIndex = index;
            catchedArrayIndex = center;
            return {center, true};
        }
        if(Base::array[center].index < index) {
            leftSide = center + 1;
        } else {
            if(center > 0) {
                rightSide = center - 1;
            } else {
                break;
            }
        }
    }
    return {};
}

template<typename Element>
bool IndexedDynamicArray<Element>::hasElementAt(size_t index) const noexcept {
    return findArrayIndexOfElementAtIndex(index).found;
}

template<typename Element>
const Element& IndexedDynamicArray<Element>::operator[](size_t index) const noexcept {
    return getElement(index);
}

template<typename Element>
const Element& IndexedDynamicArray<Element>::getElement(size_t index) const noexcept {
    return Base::array[findArrayIndexOfElementAtIndex(index).index].element;
}

template<typename Element>
size_t IndexedDynamicArray<Element>::getFirstElementIndex() const noexcept {
    return Base::isEmpty() ? 0 : Base::array[0].index;
}

template<typename Element>
size_t IndexedDynamicArray<Element>::getLastElementIndex() const noexcept {
    return  Base::isEmpty() ? 0 : Base::array[Base::arraySize - 1].index;
}

template<typename Element>
void IndexedDynamicArray<Element>::sort() noexcept {
    size_t insertedIndex = Base::arraySize - 1;
    size_t checkedIndex = insertedIndex - 1;
    IndexedElement<Element> temp;
    while((insertedIndex > 0) && (Base::array[checkedIndex].index > Base::array[insertedIndex].index)) {
        temp = Base::array[checkedIndex];
        Base::array[checkedIndex] = Base::array[insertedIndex];
        Base::array[insertedIndex] = temp;
        --checkedIndex;
        --insertedIndex;
    }
}

template<typename Element>
void IndexedDynamicArray<Element>::addNewElement(const Element& element, size_t index) {
    catched = false;
    Base::push({index, element});
    sort();
}

template<typename Element>
void IndexedDynamicArray<Element>::setElement(size_t index, const Element& element) {
    const FindIndexResult findResult = findArrayIndexOfElementAtIndex(index);
    if(findResult.found) {
        Base::array[findResult.index].element = element;
    } else {
        addNewElement(element, index);
    }  
}

template<typename Element>
void IndexedDynamicArray<Element>::removeElement(size_t index) noexcept {
    const FindIndexResult findResult = findArrayIndexOfElementAtIndex(index);
    if(findResult.found) {
        catched = false;
        for(size_t arrayIndex = findResult.index + 1; arrayIndex < Base::arraySize; ++arrayIndex) {
            Base::array[arrayIndex - 1] = Base::array[arrayIndex];
        }
        --Base::arraySize;
    }
}

template<typename Element>
void IndexedDynamicArray<Element>::clear() noexcept {
    catched = false;
    Base::clear();
}

template<typename Element>
template<typename ForEachInDynamicArrayFunction>
void IndexedDynamicArray<Element>::forEachElement(ForEachInDynamicArrayFunction function) const noexcept {
    Base::forEach([&function](const IndexedElement<Element>& entry, size_t) {
        function(entry.element, entry.index);
    });
}

template<typename Element>
template<typename ForEachInDynamicArrayFunction>
void IndexedDynamicArray<Element>::forEach(ForEachInDynamicArrayFunction& function) const noexcept {
    forEachElement<ForEachInDynamicArrayFunction&>(function);
}

template<typename Element>
template<typename ForEachInDynamicArrayFunction>
void IndexedDynamicArray<Element>::forEach(const ForEachInDynamicArrayFunction& function) const noexcept {
    forEachElement<const ForEachInDynamicArrayFunction&>(function);
}